{"config":{"lang":["ja"],"separator":"[\\s\\-\u3000\u3001\u3002\uff0c\uff0e]+","pipeline":["stemmer"]},"docs":[{"location":"index.html","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"index.html#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"index.html#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"apiref.html","title":"API Reference","text":""},{"location":"apiref.html#mylib.sample","title":"mylib.sample","text":"<p>Functions:</p> <ul> <li> <code>\u4eba\u751f\u3068\u5b87\u5b99\u305d\u3057\u3066\u3059\u3079\u3066\u306e\u7b54\u3048</code>             \u2013              <p>The Answer of Life, the Universe, and Everything</p> </li> <li> <code>\u751f\u547d\u3068\u5b87\u5b99\u305d\u3057\u3066\u4e07\u7269\u306b\u3064\u3044\u3066\u306e\u7a76\u6975\u306e\u7591\u554f\u306e\u7b54\u3048</code>             \u2013              <p>The Answer to the Ultimate Question</p> </li> <li> <code>\u5b87\u5b99\u306e\u59cb\u307e\u308a\u3068\u7d42\u308f\u308a\u306e\u7b54\u3048</code>             \u2013              <p>The beginning and end of the universe</p> </li> </ul>"},{"location":"apiref.html#mylib.sample.\u4eba\u751f\u3068\u5b87\u5b99\u305d\u3057\u3066\u3059\u3079\u3066\u306e\u7b54\u3048","title":"\u4eba\u751f\u3068\u5b87\u5b99\u305d\u3057\u3066\u3059\u3079\u3066\u306e\u7b54\u3048","text":"<pre><code>\u4eba\u751f\u3068\u5b87\u5b99\u305d\u3057\u3066\u3059\u3079\u3066\u306e\u7b54\u3048()\n</code></pre> <p>The Answer of Life, the Universe, and Everything</p> Source code in <code>mylib/sample.py</code> <pre><code>def \u4eba\u751f\u3068\u5b87\u5b99\u305d\u3057\u3066\u3059\u3079\u3066\u306e\u7b54\u3048 ():\n    \"\"\"The Answer of Life, the Universe, and Everything\"\"\"\n    return 42\n</code></pre>"},{"location":"apiref.html#mylib.sample.\u751f\u547d\u3068\u5b87\u5b99\u305d\u3057\u3066\u4e07\u7269\u306b\u3064\u3044\u3066\u306e\u7a76\u6975\u306e\u7591\u554f\u306e\u7b54\u3048","title":"\u751f\u547d\u3068\u5b87\u5b99\u305d\u3057\u3066\u4e07\u7269\u306b\u3064\u3044\u3066\u306e\u7a76\u6975\u306e\u7591\u554f\u306e\u7b54\u3048","text":"<pre><code>\u751f\u547d\u3068\u5b87\u5b99\u305d\u3057\u3066\u4e07\u7269\u306b\u3064\u3044\u3066\u306e\u7a76\u6975\u306e\u7591\u554f\u306e\u7b54\u3048()\n</code></pre> <p>The Answer to the Ultimate Question of Life, the Universe, and Everything</p> Source code in <code>mylib/sample.py</code> <pre><code>def  \u751f\u547d\u3068\u5b87\u5b99\u305d\u3057\u3066\u4e07\u7269\u306b\u3064\u3044\u3066\u306e\u7a76\u6975\u306e\u7591\u554f\u306e\u7b54\u3048 ():\n    \"\"\"The Answer to the Ultimate Question\n    of Life, the Universe, and Everything\"\"\"\n    return 42\n</code></pre>"},{"location":"apiref.html#mylib.sample.\u5b87\u5b99\u306e\u59cb\u307e\u308a\u3068\u7d42\u308f\u308a\u306e\u7b54\u3048","title":"\u5b87\u5b99\u306e\u59cb\u307e\u308a\u3068\u7d42\u308f\u308a\u306e\u7b54\u3048","text":"<pre><code>\u5b87\u5b99\u306e\u59cb\u307e\u308a\u3068\u7d42\u308f\u308a\u306e\u7b54\u3048()\n</code></pre> <p>The beginning and end of the universe</p> Source code in <code>mylib/sample.py</code> <pre><code>def \u5b87\u5b99\u306e\u59cb\u307e\u308a\u3068\u7d42\u308f\u308a\u306e\u7b54\u3048 ():\n    \"\"\"The beginning and end of the universe\"\"\"\n    return '\u3046'\n</code></pre>"},{"location":"apiref.html#mylib.main","title":"mylib.main","text":"<p>Classes:</p> <ul> <li> <code>TestClass</code>           \u2013            <p>Summary line.</p> </li> </ul>"},{"location":"apiref.html#mylib.main.TestClass","title":"TestClass","text":"<p>Summary line.</p> <p>Methods:</p> <ul> <li> <code>testfunc</code>             \u2013              <p>sum</p> </li> </ul> Source code in <code>mylib/main.py</code> <pre><code>class TestClass:\n    \"\"\"Summary line.\n    \"\"\"\n    def testfunc(self, x: int, y: int) -&gt; int:\n        \"\"\"sum\n\n        Args:\n            x (int): 1st argument\n            y (int): 2nd argument\n\n        Returns:\n            int: sum result\n\n        Examples:\n            &gt;&gt;&gt; print(testfunc(2,5))\n            7\n        \"\"\"\n        return x + y\n</code></pre>"},{"location":"apiref.html#mylib.main.TestClass.testfunc","title":"testfunc","text":"<pre><code>testfunc(x: int, y: int) -&gt; int\n</code></pre> <p>sum</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>sum result</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; print(testfunc(2,5))\n7\n</code></pre> Source code in <code>mylib/main.py</code> <pre><code>def testfunc(self, x: int, y: int) -&gt; int:\n    \"\"\"sum\n\n    Args:\n        x (int): 1st argument\n        y (int): 2nd argument\n\n    Returns:\n        int: sum result\n\n    Examples:\n        &gt;&gt;&gt; print(testfunc(2,5))\n        7\n    \"\"\"\n    return x + y\n</code></pre>"},{"location":"apiref.html#mylib.main.TestClass.testfunc(x)","title":"<code>x</code>","text":"(<code>int</code>)           \u2013            <p>1<sup>st</sup> argument</p>"},{"location":"apiref.html#mylib.main.TestClass.testfunc(y)","title":"<code>y</code>","text":"(<code>int</code>)           \u2013            <p>2<sup>nd</sup> argument</p>"},{"location":"apiref.html#mylib.example_google","title":"mylib.example_google","text":"<p>Example Google style docstrings.</p> <p>This module demonstrates documentation as specified by the <code>Google Python Style Guide</code>_. Docstrings may extend over multiple lines. Sections are created with a section header and a colon followed by a block of indented text.</p> Example <p>Examples can be given using either the <code>Example</code> or <code>Examples</code> sections. Sections support any reStructuredText formatting, including literal blocks::</p> <pre><code>$ python example_google.py\n</code></pre> <p>Section breaks are created by resuming unindented text. Section breaks are also implicitly created anytime a new section starts.</p> <p>Attributes:</p> <ul> <li> <code>module_level_variable1</code>               (<code>int</code>)           \u2013            <p>Module level variables may be documented in either the <code>Attributes</code> section of the module docstring, or in an inline docstring immediately following the variable.</p> <p>Either form is acceptable, but the two should not be mixed. Choose one convention to document module level variables and be consistent with it.</p> </li> </ul> Todo <ul> <li>For module TODOs</li> <li>You have to also use <code>sphinx.ext.todo</code> extension</li> </ul> <p>.. _Google Python Style Guide:    http://google.github.io/styleguide/pyguide.html</p> <p>Classes:</p> <ul> <li> <code>ExampleError</code>           \u2013            <p>Exceptions are documented in the same way as classes.</p> </li> <li> <code>ExampleClass</code>           \u2013            <p>The summary line for a class docstring should fit on one line.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>function_with_types_in_docstring</code>             \u2013              <p>Example function with types documented in the docstring.</p> </li> <li> <code>function_with_pep484_type_annotations</code>             \u2013              <p>Example function with PEP 484 type annotations.</p> </li> <li> <code>module_level_function</code>             \u2013              <p>This is an example of a module level function.</p> </li> <li> <code>example_generator</code>             \u2013              <p>Generators have a <code>Yields</code> section instead of a <code>Returns</code> section.</p> </li> </ul>"},{"location":"apiref.html#mylib.example_google.module_level_variable2","title":"module_level_variable2  <code>module-attribute</code>","text":"<pre><code>module_level_variable2 = 98765\n</code></pre> <p>int: Module level variable documented inline.</p> <p>The docstring may span multiple lines. The type may optionally be specified on the first line, separated by a colon.</p>"},{"location":"apiref.html#mylib.example_google.ExampleError","title":"ExampleError","text":"<p>               Bases: <code>Exception</code></p> <p>Exceptions are documented in the same way as classes.</p> <p>The init method may be documented in either the class level docstring, or as a docstring on the init method itself.</p> <p>Either form is acceptable, but the two should not be mixed. Choose one convention to document the init method and be consistent with it.</p> Note <p>Do not include the <code>self</code> parameter in the <code>Args</code> section.</p> <p>Parameters:</p> <p>Attributes:</p> <ul> <li> <code>msg</code>               (<code>str</code>)           \u2013            <p>Human readable string describing the exception.</p> </li> <li> <code>code</code>               (<code>int</code>)           \u2013            <p>Exception error code.</p> </li> </ul> Source code in <code>mylib/example_google.py</code> <pre><code>class ExampleError(Exception):\n    \"\"\"Exceptions are documented in the same way as classes.\n\n    The __init__ method may be documented in either the class level\n    docstring, or as a docstring on the __init__ method itself.\n\n    Either form is acceptable, but the two should not be mixed. Choose one\n    convention to document the __init__ method and be consistent with it.\n\n    Note:\n        Do not include the `self` parameter in the ``Args`` section.\n\n    Args:\n        msg (str): Human readable string describing the exception.\n        code (:obj:`int`, optional): Error code.\n\n    Attributes:\n        msg (str): Human readable string describing the exception.\n        code (int): Exception error code.\n\n    \"\"\"\n\n    def __init__(self, msg, code):\n        self.msg = msg\n        self.code = code\n</code></pre>"},{"location":"apiref.html#mylib.example_google.ExampleError(msg)","title":"<code>msg</code>","text":"(<code>str</code>)           \u2013            <p>Human readable string describing the exception.</p>"},{"location":"apiref.html#mylib.example_google.ExampleError(code)","title":"<code>code</code>","text":"\u2013            <p>obj:<code>int</code>, optional): Error code.</p>"},{"location":"apiref.html#mylib.example_google.ExampleClass","title":"ExampleClass","text":"<p>               Bases: <code>object</code></p> <p>The summary line for a class docstring should fit on one line.</p> <p>If the class has public attributes, they may be documented here in an <code>Attributes</code> section and follow the same formatting as a function's <code>Args</code> section. Alternatively, attributes may be documented inline with the attribute's declaration (see init method below).</p> <p>Properties created with the <code>@property</code> decorator should be documented in the property's getter method.</p> <p>Attributes:</p> <ul> <li> <code>attr1</code>               (<code>str</code>)           \u2013            <p>Description of <code>attr1</code>.</p> </li> <li> <code>attr2</code>           \u2013            <p>obj:<code>int</code>, optional): Description of <code>attr2</code>.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>example_method</code>             \u2013              <p>Class methods are similar to regular functions.</p> </li> </ul> Source code in <code>mylib/example_google.py</code> <pre><code>class ExampleClass(object):\n    \"\"\"The summary line for a class docstring should fit on one line.\n\n    If the class has public attributes, they may be documented here\n    in an ``Attributes`` section and follow the same formatting as a\n    function's ``Args`` section. Alternatively, attributes may be documented\n    inline with the attribute's declaration (see __init__ method below).\n\n    Properties created with the ``@property`` decorator should be documented\n    in the property's getter method.\n\n    Attributes:\n        attr1 (str): Description of `attr1`.\n        attr2 (:obj:`int`, optional): Description of `attr2`.\n\n    \"\"\"\n\n    def __init__(self, param1, param2, param3):\n        \"\"\"Example of docstring on the __init__ method.\n\n        The __init__ method may be documented in either the class level\n        docstring, or as a docstring on the __init__ method itself.\n\n        Either form is acceptable, but the two should not be mixed. Choose one\n        convention to document the __init__ method and be consistent with it.\n\n        Note:\n            Do not include the `self` parameter in the ``Args`` section.\n\n        Args:\n            param1 (str): Description of `param1`.\n            param2 (:obj:`int`, optional): Description of `param2`. Multiple\n                lines are supported.\n            param3 (:obj:`list` of :obj:`str`): Description of `param3`.\n\n        \"\"\"\n        self.attr1 = param1\n        self.attr2 = param2\n        self.attr3 = param3  #: Doc comment *inline* with attribute\n\n        #: list of str: Doc comment *before* attribute, with type specified\n        self.attr4 = ['attr4']\n\n        self.attr5 = None\n        \"\"\"str: Docstring *after* attribute, with type specified.\"\"\"\n\n    @property\n    def readonly_property(self):\n        \"\"\"str: Properties should be documented in their getter method.\"\"\"\n        return 'readonly_property'\n\n    @property\n    def readwrite_property(self):\n        \"\"\":obj:`list` of :obj:`str`: Properties with both a getter and setter\n        should only be documented in their getter method.\n\n        If the setter method contains notable behavior, it should be\n        mentioned here.\n        \"\"\"\n        return ['readwrite_property']\n\n    @readwrite_property.setter\n    def readwrite_property(self, value):\n        value\n\n    def example_method(self, param1, param2):\n        \"\"\"Class methods are similar to regular functions.\n\n        Note:\n            Do not include the `self` parameter in the ``Args`` section.\n\n        Args:\n            param1: The first parameter.\n            param2: The second parameter.\n\n        Returns:\n            True if successful, False otherwise.\n\n        \"\"\"\n        return True\n\n    def __special__(self):\n        \"\"\"By default special members with docstrings are not included.\n\n        Special members are any methods or attributes that start with and\n        end with a double underscore. Any special member with a docstring\n        will be included in the output, if\n        ``napoleon_include_special_with_doc`` is set to True.\n\n        This behavior can be enabled by changing the following setting in\n        Sphinx's conf.py::\n\n            napoleon_include_special_with_doc = True\n\n        \"\"\"\n        pass\n\n    def __special_without_docstring__(self):\n        pass\n\n    def _private(self):\n        \"\"\"By default private members are not included.\n\n        Private members are any methods or attributes that start with an\n        underscore and are *not* special. By default they are not included\n        in the output.\n\n        This behavior can be changed such that private members *are* included\n        by changing the following setting in Sphinx's conf.py::\n\n            napoleon_include_private_with_doc = True\n\n        \"\"\"\n        pass\n\n    def _private_without_docstring(self):\n        pass\n</code></pre>"},{"location":"apiref.html#mylib.example_google.ExampleClass.attr5","title":"attr5  <code>instance-attribute</code>","text":"<pre><code>attr5 = None\n</code></pre> <p>str: Docstring after attribute, with type specified.</p>"},{"location":"apiref.html#mylib.example_google.ExampleClass.readonly_property","title":"readonly_property  <code>property</code>","text":"<pre><code>readonly_property\n</code></pre> <p>str: Properties should be documented in their getter method.</p>"},{"location":"apiref.html#mylib.example_google.ExampleClass.readwrite_property","title":"readwrite_property  <code>property</code> <code>writable</code>","text":"<pre><code>readwrite_property\n</code></pre> <p>:obj:<code>list</code> of :obj:<code>str</code>: Properties with both a getter and setter should only be documented in their getter method.</p> <p>If the setter method contains notable behavior, it should be mentioned here.</p>"},{"location":"apiref.html#mylib.example_google.ExampleClass.example_method","title":"example_method","text":"<pre><code>example_method(param1, param2)\n</code></pre> <p>Class methods are similar to regular functions.</p> Note <p>Do not include the <code>self</code> parameter in the <code>Args</code> section.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li>           \u2013            <p>True if successful, False otherwise.</p> </li> </ul> Source code in <code>mylib/example_google.py</code> <pre><code>def example_method(self, param1, param2):\n    \"\"\"Class methods are similar to regular functions.\n\n    Note:\n        Do not include the `self` parameter in the ``Args`` section.\n\n    Args:\n        param1: The first parameter.\n        param2: The second parameter.\n\n    Returns:\n        True if successful, False otherwise.\n\n    \"\"\"\n    return True\n</code></pre>"},{"location":"apiref.html#mylib.example_google.ExampleClass.example_method(param1)","title":"<code>param1</code>","text":"\u2013            <p>The first parameter.</p>"},{"location":"apiref.html#mylib.example_google.ExampleClass.example_method(param2)","title":"<code>param2</code>","text":"\u2013            <p>The second parameter.</p>"},{"location":"apiref.html#mylib.example_google.function_with_types_in_docstring","title":"function_with_types_in_docstring","text":"<pre><code>function_with_types_in_docstring(param1, param2)\n</code></pre> <p>Example function with types documented in the docstring.</p> <p><code>PEP 484</code> type annotations are supported. If attribute, parameter, and return types are annotated according to <code>PEP 484</code>, they do not need to be included in the docstring:</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code>          \u2013            <p>The return value. True for success, False otherwise.</p> </li> </ul> <p>.. _PEP 484:     https://www.python.org/dev/peps/pep-0484/</p> Source code in <code>mylib/example_google.py</code> <pre><code>def function_with_types_in_docstring(param1, param2):\n    \"\"\"Example function with types documented in the docstring.\n\n    `PEP 484`_ type annotations are supported. If attribute, parameter, and\n    return types are annotated according to `PEP 484`_, they do not need to be\n    included in the docstring:\n\n    Args:\n        param1 (int): The first parameter.\n        param2 (str): The second parameter.\n\n    Returns:\n        bool: The return value. True for success, False otherwise.\n\n    .. _PEP 484:\n        https://www.python.org/dev/peps/pep-0484/\n\n    \"\"\"\n</code></pre>"},{"location":"apiref.html#mylib.example_google.function_with_types_in_docstring(param1)","title":"<code>param1</code>","text":"(<code>int</code>)           \u2013            <p>The first parameter.</p>"},{"location":"apiref.html#mylib.example_google.function_with_types_in_docstring(param2)","title":"<code>param2</code>","text":"(<code>str</code>)           \u2013            <p>The second parameter.</p>"},{"location":"apiref.html#mylib.example_google.function_with_pep484_type_annotations","title":"function_with_pep484_type_annotations","text":"<pre><code>function_with_pep484_type_annotations(param1: int, param2: str) -&gt; bool\n</code></pre> <p>Example function with PEP 484 type annotations.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>The return value. True for success, False otherwise.</p> </li> </ul> Source code in <code>mylib/example_google.py</code> <pre><code>def function_with_pep484_type_annotations(param1: int, param2: str) -&gt; bool:\n    \"\"\"Example function with PEP 484 type annotations.\n\n    Args:\n        param1: The first parameter.\n        param2: The second parameter.\n\n    Returns:\n        The return value. True for success, False otherwise.\n\n    \"\"\"\n</code></pre>"},{"location":"apiref.html#mylib.example_google.function_with_pep484_type_annotations(param1)","title":"<code>param1</code>","text":"(<code>int</code>)           \u2013            <p>The first parameter.</p>"},{"location":"apiref.html#mylib.example_google.function_with_pep484_type_annotations(param2)","title":"<code>param2</code>","text":"(<code>str</code>)           \u2013            <p>The second parameter.</p>"},{"location":"apiref.html#mylib.example_google.module_level_function","title":"module_level_function","text":"<pre><code>module_level_function(param1, param2=None, *args, **kwargs)\n</code></pre> <p>This is an example of a module level function.</p> <p>Function parameters should be documented in the <code>Args</code> section. The name of each parameter is required. The type and description of each parameter is optional, but should be included if not obvious.</p> <p>If *args or **kwargs are accepted, they should be listed as <code>*args</code> and <code>**kwargs</code>.</p> <p>The format for a parameter is::</p> <pre><code>name (type): description\n    The description may span multiple lines. Following\n    lines should be indented. The \"(type)\" is optional.\n\n    Multiple paragraphs are supported in parameter\n    descriptions.\n</code></pre> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code>          \u2013            <p>True if successful, False otherwise.</p> </li> <li>           \u2013            <p>The return type is optional and may be specified at the beginning of</p> </li> <li>           \u2013            <p>the <code>Returns</code> section followed by a colon.</p> </li> <li>           \u2013            <p>The <code>Returns</code> section may span multiple lines and paragraphs.</p> </li> <li>           \u2013            <p>Following lines should be indented to match the first line.</p> </li> <li>           \u2013            <p>The <code>Returns</code> section supports any reStructuredText formatting,</p> </li> <li>           \u2013            <p>including literal blocks::</p> <p>{     'param1': param1,     'param2': param2 }</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>AttributeError</code>             \u2013            <p>The <code>Raises</code> section is a list of all exceptions that are relevant to the interface.</p> </li> <li> <code>ValueError</code>             \u2013            <p>If <code>param2</code> is equal to <code>param1</code>.</p> </li> </ul> Source code in <code>mylib/example_google.py</code> <pre><code>def module_level_function(param1, param2=None, *args, **kwargs):\n    r\"\"\"This is an example of a module level function.\n\n    Function parameters should be documented in the ``Args`` section. The name\n    of each parameter is required. The type and description of each parameter\n    is optional, but should be included if not obvious.\n\n    If \\*args or \\*\\*kwargs are accepted,\n    they should be listed as ``*args`` and ``**kwargs``.\n\n    The format for a parameter is::\n\n        name (type): description\n            The description may span multiple lines. Following\n            lines should be indented. The \"(type)\" is optional.\n\n            Multiple paragraphs are supported in parameter\n            descriptions.\n\n    Args:\n        param1 (int): The first parameter.\n        param2 (:obj:`str`, optional): The second parameter. Defaults to None.\n            Second line of description should be indented.\n        *args: Variable length argument list.\n        **kwargs: Arbitrary keyword arguments.\n\n    Returns:\n        bool: True if successful, False otherwise.\n\n        The return type is optional and may be specified at the beginning of\n        the ``Returns`` section followed by a colon.\n\n        The ``Returns`` section may span multiple lines and paragraphs.\n        Following lines should be indented to match the first line.\n\n        The ``Returns`` section supports any reStructuredText formatting,\n        including literal blocks::\n\n            {\n                'param1': param1,\n                'param2': param2\n            }\n\n    Raises:\n        AttributeError: The ``Raises`` section is a list of all exceptions\n            that are relevant to the interface.\n        ValueError: If `param2` is equal to `param1`.\n\n    \"\"\"\n    if param1 == param2:\n        raise ValueError('param1 may not be equal to param2')\n    return True\n</code></pre>"},{"location":"apiref.html#mylib.example_google.module_level_function(param1)","title":"<code>param1</code>","text":"(<code>int</code>)           \u2013            <p>The first parameter.</p>"},{"location":"apiref.html#mylib.example_google.module_level_function(param2)","title":"<code>param2</code>","text":"\u2013            <p>obj:<code>str</code>, optional): The second parameter. Defaults to None. Second line of description should be indented.</p>"},{"location":"apiref.html#mylib.example_google.module_level_function(*args)","title":"<code>*args</code>","text":"\u2013            <p>Variable length argument list.</p>"},{"location":"apiref.html#mylib.example_google.module_level_function(**kwargs)","title":"<code>**kwargs</code>","text":"\u2013            <p>Arbitrary keyword arguments.</p>"},{"location":"apiref.html#mylib.example_google.example_generator","title":"example_generator","text":"<pre><code>example_generator(n)\n</code></pre> <p>Generators have a <code>Yields</code> section instead of a <code>Returns</code> section.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>int</code>          \u2013            <p>The next number in the range of 0 to <code>n</code> - 1.</p> </li> </ul> <p>Examples:</p> <p>Examples should be written in doctest format, and should illustrate how to use the function.</p> <pre><code>&gt;&gt;&gt; print([i for i in example_generator(4)])\n[0, 1, 2, 3]\n</code></pre> Source code in <code>mylib/example_google.py</code> <pre><code>def example_generator(n):\n    \"\"\"Generators have a ``Yields`` section instead of a ``Returns`` section.\n\n    Args:\n        n (int): The upper limit of the range to generate, from 0 to `n` - 1.\n\n    Yields:\n        int: The next number in the range of 0 to `n` - 1.\n\n    Examples:\n        Examples should be written in doctest format, and should illustrate how\n        to use the function.\n\n        &gt;&gt;&gt; print([i for i in example_generator(4)])\n        [0, 1, 2, 3]\n\n    \"\"\"\n    for i in range(n):\n        yield i\n</code></pre>"},{"location":"apiref.html#mylib.example_google.example_generator(n)","title":"<code>n</code>","text":"(<code>int</code>)           \u2013            <p>The upper limit of the range to generate, from 0 to <code>n</code> - 1.</p>"}]}